name: Nightly build
on:
  workflow_dispatch

jobs:

  release:
    name: Publish Plugin
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:

#      - name: Maximize Build Space
#        uses: jlumbroso/free-disk-space@main
#        with:
#          tool-cache: false

      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Previous tag
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 0.1.0

      - name: Calculate nightly build version
        id: nightly_version
        run: |
          # Extract the version from gradle.properties
          GRADLE_VERSION=$(grep '^pluginVersion=' gradle.properties | cut -d'=' -f2)
          
          # Get the previous tag
          PREVIOUS_TAG="${{ steps.previoustag.outputs.tag }}"

          # Determine the new version
          if [[ "$PREVIOUS_TAG" == *-nightly.* ]]; then
            prefix="${PREVIOUS_TAG%.*}"
            number="${PREVIOUS_TAG##*.}"
            incremented_number=$((number + 1))
            NEW_VERSION="${prefix}.${incremented_number}"
          else
            BASE_VERSION=${GRADLE_VERSION%-SNAPSHOT}
            NEW_VERSION="${BASE_VERSION}-nightly.1"
          fi

          echo "new_version=${NEW_VERSION}"
          echo "new_version=${NEW_VERSION}" >> $GITHUB_ENV

      - name: Update version in gradle.properties
        run: |
          NEW_VERSION=${{ env.new_version }}
          sed -i "s/^pluginVersion=.*/pluginVersion=${NEW_VERSION}/" gradle.properties
          cat gradle.properties

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true

      # Set environment variables
#      - name: Export Properties
#        id: properties
#        shell: bash
#        run: |
#          CHANGELOG="$(cat << 'EOM' | sed -e 's/^[[:space:]]*$//g' -e '/./,$!d'
#          ${{ github.event.release.body }}
#          EOM
#          )"
#
#          echo "changelog<<EOF" >> $GITHUB_OUTPUT
#          echo "$CHANGELOG" >> $GITHUB_OUTPUT
#          echo "EOF" >> $GITHUB_OUTPUT

#       Update the Unreleased section with the current release note
#      - name: Patch Changelog
#        if: ${{ steps.properties.outputs.changelog != '' }}
#        env:
#          CHANGELOG: ${{ steps.properties.outputs.changelog }}
#        run: |
#          ./gradlew patchChangelog --release-note="$CHANGELOG"

      # Publish the plugin to JetBrains Marketplace
      - name: Publish Plugin
        env:
          PUBLISH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}
          CERTIFICATE_CHAIN: ${{ secrets.CERTIFICATE_CHAIN }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          PRIVATE_KEY_PASSWORD: ${{ secrets.PRIVATE_KEY_PASSWORD }}
          RELEASE_CHANNELS: nightly
        run: ./gradlew publishPlugin

      - name: Commit and Tag New Version
        run: |
               git config user.name "github-actions[bot]"
               git config user.email "github-actions[bot]@users.noreply.github.com"
               git tag ${{ env.new_version }}
               git push origin --tags

#      - name: Collect release notes
#        run: |
#          PREVIOUS_TAG="${{ steps.previoustag.outputs.tag }}"
#          COMMITS=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"%s")
#          echo "commits=${COMMITS}"
#          echo "commits=${COMMITS}" >> $GITHUB_ENV
          
          


#      # Create a new release draft which is not publicly visible and requires manual acceptance
#      - name: Create Release Draft
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          gh release create ${{ env.new_version }} \
#            --title ${{ env.new_version }} \
#            --notes "$(cat << 'EOM'
#          ${{ env.commits }}
#          EOM
#          )"
#
      - name: Create Github Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ env.new_version }} \
            --title ${{ env.new_version }} \
            --notes-start-tag ${{ steps.previoustag.outputs.tag }} \
            --prerelease \
            --verify-tag

#       Upload artifact as a release asset
      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ env.new_version }} ./build/distributions/*

      # Create a pull request
#      - name: Create Pull Request
#        if: ${{ steps.properties.outputs.changelog != '' }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          VERSION="${{ github.event.release.tag_name }}"
#          BRANCH="changelog-update-$VERSION"
#          LABEL="release changelog"
#
#          git config user.email "action@github.com"
#          git config user.name "GitHub Action"
#
#          git checkout -b $BRANCH
#          git commit -am "Changelog update - $VERSION"
#          git push --set-upstream origin $BRANCH
#
#          gh label create "$LABEL" \
#            --description "Pull requests with release changelog update" \
#            --force \
#            || true
#
#          gh pr create \
#            --title "Changelog update - \`$VERSION\`" \
#            --body "Current pull request contains patched \`CHANGELOG.md\` file for the \`$VERSION\` version." \
#            --label "$LABEL" \
#            --head $BRANCH
