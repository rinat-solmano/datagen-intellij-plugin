name: Nightly build
on:
  workflow_dispatch

jobs:

  release:
    name: Publish Plugin
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:

#      - name: Maximize Build Space
#        uses: jlumbroso/free-disk-space@main
#        with:
#          tool-cache: false

      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Previous tag
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 0.1.0

      - name: Get git log from last tag
        id: gitlog
        run: |
          git log ${{ steps.previoustag.outputs.tag }}..HEAD --pretty=format:"- %s" > git.log
          cat git.log
          
          if [ ! -s git.log ]; then
            echo "Git log is empty. Skipping remaining steps."
            echo "changes_detected=false" >> $GITHUB_ENV
          else
            echo "changes_detected=true" >> $GITHUB_ENV
          fi
      

      - name: Calculate nightly build version
        id: nightly_version
        if: env.changes_detected == 'true'
        run: |
          # Extract the version from gradle.properties
          GRADLE_VERSION=$(grep '^pluginVersion=' gradle.properties | cut -d'=' -f2)
          
          # Get the previous tag
          PREVIOUS_TAG="${{ steps.previoustag.outputs.tag }}"

          # Determine the new version
          if [[ "$PREVIOUS_TAG" == *-nightly.* ]]; then
            prefix="${PREVIOUS_TAG%.*}"
            number="${PREVIOUS_TAG##*.}"
            incremented_number=$((number + 1))
            NEW_VERSION="${prefix}.${incremented_number}"
          else
            BASE_VERSION=${GRADLE_VERSION%-SNAPSHOT}
            NEW_VERSION="${BASE_VERSION}-nightly.1"
          fi

          echo "new_version=${NEW_VERSION}"
          echo "new_version=${NEW_VERSION}" >> $GITHUB_ENV

      - name: Update version in gradle.properties
        if: env.changes_detected == 'true'
        run: |
          NEW_VERSION=${{ env.new_version }}
          sed -i "s/^pluginVersion=.*/pluginVersion=${NEW_VERSION}/" gradle.properties
          cat gradle.properties

      - name: Setup Java
        if: env.changes_detected == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      - name: Setup Gradle
        if: env.changes_detected == 'true'
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true

      - name: Publish Plugin
        if: env.changes_detected == 'true'
        env:
          PUBLISH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}
          CERTIFICATE_CHAIN: ${{ secrets.CERTIFICATE_CHAIN }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          PRIVATE_KEY_PASSWORD: ${{ secrets.PRIVATE_KEY_PASSWORD }}
          RELEASE_CHANNELS: nightly
        run: ./gradlew publishPlugin

      - name: Commit and Tag New Version
        if: env.changes_detected == 'true'
        run: |
               git config user.name "github-actions[bot]"
               git config user.email "github-actions[bot]@users.noreply.github.com"
               git tag ${{ env.new_version }}
               git push origin --tags

      - name: Create Github Release
        if: env.changes_detected == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ env.new_version }} \
            --title ${{ env.new_version }} \
            --prerelease \
            --verify-tag \
            --notes-file git.log

      - name: Upload Release Asset
        if: env.changes_detected == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ env.new_version }} ./build/distributions/*
