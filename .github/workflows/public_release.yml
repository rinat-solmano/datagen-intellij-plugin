name: Public release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Specify the PROPERLY TESTED nightly build version for public release'
        required: true
        type: string
      release_type:
        description: 'Specify the type of release'
        required: true
        type: choice
        default: 'minor'
        options:
          - 'minor'
          - 'major'

jobs:

  release:
    name: Publish release
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.get_jb_tags.outputs.latest_tag }}
      changes_detected: ${{ steps.gitlog.outputs.changes_detected }}
      commits: ${{ steps.gitlog.outputs.commits }}
    steps:
      - name: Check if triggered from main branch
        run: |
          if [ "${{ github.ref }}" != 'refs/heads/main' ]; then
            echo "This workflow is allowed to run only from main branch."
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate input nightly build version
        run: |
          [[ ! "${{ github.event.inputs.tag }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+-nightly.*$ ]] && { echo "Error: The input version is not valid nightly build version for jetbrains plugin (x.y.z-nightly.i)"; exit 1; }
          [[ $(git tag | grep jb-"${{ github.event.inputs.tag }}") ]] || { echo "The input version does not exist"; exit 1; }
          
          NIGHTLY_BUILD_VERSION="${${{ github.event.inputs.tag }}#jb-}"
          NIGHTLY_BUILD_BASE_VERSION="${NIGHTLY_BUILD_VERSION%-nightly.*}"
          echo "Nightly build base: ${NIGHTLY_BUILD_BASE_VERSION}"
          
          LAST_RELEASE_TAG=$(git tag --list "jb-*" | grep -v "nightly" | sort -V | tail -n 1 || echo "jb-0.0.0")
          LAST_RELEASE_VERSION="${LAST_RELEASE_TAG#jb-}"
          echo "Last release version: ${LAST_RELEASE_VERSION}"

          if [[ $(printf "%s\n%s" "$LAST_RELEASE_VERSION" "$NIGHTLY_BUILD_BASE_VERSION" | sort -V | tail -n 1) == "$LAST_RELEASE_VERSION" ]]; then
            echo "Error: Nightly version ${NIGHTLY_BUILD_VERSION} is not higher than last release version ${LAST_RELEASE_VERSION}."
            exit 1
          fi

      - name: Calculate release version
        run: |
          GRADLE_VERSION=$(grep '^pluginVersion=' gradle.properties | cut -d'=' -f2)
          CURRENT_BASE_VERSION=${GRADLE_VERSION%-SNAPSHOT}
          echo "Gradle base version: ${CURRENT_BASE_VERSION}"

          # Determine the new release version based on the release type
          if [ "${{ github.event.inputs.release_type }}" == "major" ]; then
            IFS='.' read -r -a version_parts <<< "$CURRENT_BASE_VERSION"
            major=${version_parts[0]}
            NEW_MAJOR_VERSION=$((major + 1)).0.0
            NEW_RELEASE_VERSION="${NEW_MAJOR_VERSION}"
          else
            NEW_RELEASE_VERSION="${CURRENT_BASE_VERSION}"
          fi
          
          # Calculate the new current version which should be NEW_RELEASE_VERSION + minor increment + -SNAPSHOT
          IFS='.' read -r -a version_parts <<< "$NEW_RELEASE_VERSION"
          minor=${version_parts[1]}
          NEW_UNRELEASED_VERSION="${version_parts[0]}.$((minor + 1)).0"

          echo "new_version=${NEW_RELEASE_VERSION}"
          echo "new_version=${NEW_RELEASE_VERSION}" >> $GITHUB_ENV
          echo "new_version=${NEW_RELEASE_VERSION}" >> $GITHUB_OUTPUT
          
          echo "new_unreleased_version=${NEW_UNRELEASED_VERSION}"
          echo "new_unreleased_version=${NEW_UNRELEASED_VERSION}" >> $GITHUB_ENV
          echo "new_unreleased_version=${NEW_UNRELEASED_VERSION}" >> $GITHUB_OUTPUT

#      - name: Calculate nightly build version
#        id: nightly_version
#        run: |
#          # Extract the version from gradle.properties
#          GRADLE_VERSION=$(grep '^pluginVersion=' gradle.properties | cut -d'=' -f2)
#
#          # Get the previous tag
#          PREVIOUS_TAG="${{ needs.check_diff.outputs.latest_tag }}"
#          PREVIOUS_VERSION=${PREVIOUS_TAG#jb-}
#
#          # Determine the new version
#          CURRENT_BASE_VERSION=${GRADLE_VERSION%-SNAPSHOT}
#          PREVIOUS_BASE_VERSION="${PREVIOUS_VERSION%-nightly.*}"
#
#          if [[ "$PREVIOUS_BASE_VERSION" == "$CURRENT_BASE_VERSION" && "$PREVIOUS_VERSION" == *-nightly.* ]]; then
#            prefix="${PREVIOUS_VERSION%.*}"
#            number="${PREVIOUS_VERSION##*.}"
#            incremented_number=$((number + 1))
#            NEW_VERSION="${prefix}.${incremented_number}"
#          else
#            NEW_VERSION="${CURRENT_BASE_VERSION}-nightly.1"
#          fi
#
#          echo "new_version=${NEW_VERSION}"
#          echo "new_version=${NEW_VERSION}" >> $GITHUB_ENV
#
#      - name: Update version in gradle.properties
#        run: |
#          NEW_VERSION=${{ env.new_version }}
#          sed -i "s/^pluginVersion=.*/pluginVersion=${NEW_VERSION}/" gradle.properties
#          cat gradle.properties
#
#      - name: Setup Java
#        uses: actions/setup-java@v4
#        with:
#          distribution: zulu
#          java-version: 17
#
#      - name: Setup Gradle
#        uses: gradle/actions/setup-gradle@v3
#        with:
#          gradle-home-cache-cleanup: true
#
#      - name: Publish Plugin
#        env:
#          PUBLISH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}
#          CERTIFICATE_CHAIN: ${{ secrets.CERTIFICATE_CHAIN }}
#          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
#          PRIVATE_KEY_PASSWORD: ${{ secrets.PRIVATE_KEY_PASSWORD }}
#          RELEASE_CHANNELS: nightly
#        run: ./gradlew publishPlugin
#
#      - name: Commit and Tag New Version
#        run: |
#          git config user.name "github-actions[bot]"
#          git config user.email "github-actions[bot]@users.noreply.github.com"
#          git tag jb-${{ env.new_version }}
#          git push origin --tags
#
#      - name: Create Github Release
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          echo "${{ needs.check_diff.outputs.commits }}" > git.log
#
#          gh release create jb-${{ env.new_version }} \
#            --title jb-${{ env.new_version }} \
#            --prerelease \
#            --verify-tag \
#            --notes-file git.log
#
#      - name: Upload Release Asset
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: gh release upload jb-${{ env.new_version }} ./build/distributions/*
