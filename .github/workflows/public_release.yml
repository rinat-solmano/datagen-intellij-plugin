name: Public release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Specify the PROPERLY TESTED nightly build version to make a public release from'
        required: true
        type: string
      release_type:
        description: 'Specify the type of release'
        required: true
        type: choice
        default: 'minor'
        options:
          - 'minor'
          - 'major'

jobs:
  prepare:
    name: Prepare release
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.calculate_versions.outputs.release_version }}
      new_unreleased_version: ${{ steps.calculate_versions.outputs.new_unreleased_version }}
    steps:
      - name: Check if triggered from main branch
        run: |
          if [ "${{ github.ref }}" != 'refs/heads/main' ]; then
            echo "This workflow is allowed to run only from main branch."
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate input nightly build version
        run: |
          [[ ! "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+-nightly.[0-9]+$ ]] && { echo "Error: The input version is not valid nightly build version for jetbrains plugin (x.y.z-nightly.i)"; exit 1; }
          [[ $(git tag | grep jb-"${{ github.event.inputs.version }}") ]] || { echo "The input version does not exist"; exit 1; }
          
          NIGHTLY_VERSION=${{ github.event.inputs.version }}
          NIGHTLY_BUILD_BASE_VERSION="${NIGHTLY_VERSION%-nightly.*}"
          echo "Nightly build base: ${NIGHTLY_BUILD_BASE_VERSION}"
          
          LAST_RELEASE_TAG=$(git tag --list "jb-*" | grep -v "nightly" | sort -V | tail -n 1 || echo "jb-0.0.0")
          LAST_RELEASE_VERSION="${LAST_RELEASE_TAG#jb-}"
          echo "Last release version: ${LAST_RELEASE_VERSION}"

          if [[ $(printf "%s\n%s" "$LAST_RELEASE_VERSION" "$NIGHTLY_BUILD_BASE_VERSION" | sort -V | tail -n 1) == "$LAST_RELEASE_VERSION" ]]; then
            echo "Error: Nightly version ${NIGHTLY_BUILD_VERSION} is not higher than last release version ${LAST_RELEASE_VERSION}."
            exit 1
          fi

      - name: Calculate release version
        id: calculate_versions
        run: |
          GRADLE_VERSION=$(grep '^pluginVersion=' gradle.properties | cut -d'=' -f2)
          CURRENT_UNRELEASED_VERSION=${GRADLE_VERSION%-SNAPSHOT}
          echo "Gradle base version: ${CURRENT_UNRELEASED_VERSION}"

          # Determine the new release version based on the release type
          if [ "${{ github.event.inputs.release_type }}" == "major" ]; then
            IFS='.' read -r -a version_parts <<< "$CURRENT_UNRELEASED_VERSION"
            major=${version_parts[0]}
            NEW_MAJOR_VERSION=$((major + 1)).0.0
            NEW_RELEASE_VERSION="${NEW_MAJOR_VERSION}"
          else
            NEW_RELEASE_VERSION="${CURRENT_UNRELEASED_VERSION}"
          fi
          
          # Calculate new unreleased version (release version + minor increment)
          IFS='.' read -r -a version_parts <<< "$NEW_RELEASE_VERSION"
          minor=${version_parts[1]}
          NEW_UNRELEASED_VERSION="${version_parts[0]}.$((minor + 1)).0"

          echo "release_version=${NEW_RELEASE_VERSION}"
          echo "release_version=${NEW_RELEASE_VERSION}" >> $GITHUB_OUTPUT
          
          echo "new_unreleased_version=${NEW_UNRELEASED_VERSION}"
          echo "new_unreleased_version=${NEW_UNRELEASED_VERSION}" >> $GITHUB_OUTPUT

  release:
    name: Release
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: '${{ secrets.WORKFLOW_TOKEN }}'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true

      - name: Create release branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git checkout jb-${{ github.event.inputs.version }}
          
          git checkout -b jb-release-${{ needs.prepare.outputs.release_version }}

      - name: Update version and patch changelog
        run: |
          sed -i "s/^pluginVersion=.*/pluginVersion=${{ needs.prepare.outputs.release_version }}/" gradle.properties
          cat gradle.properties

      - name: Publish Plugin
        env:
          PUBLISH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}
          CERTIFICATE_CHAIN: ${{ secrets.CERTIFICATE_CHAIN }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          PRIVATE_KEY_PASSWORD: ${{ secrets.PRIVATE_KEY_PASSWORD }}
          RELEASE_CHANNELS: nightly,default
        run: ./gradlew publishPlugin

      - name: Commit changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add gradle.properties
          git add CHANGELOG.md
          git commit -m "Release jetbrains plugin version ${NEW_RELEASE_VERSION}"
          git push --set-upstream origin jb-release-${{ needs.prepare.outputs.release_version }}
          git tag jb-${{ needs.prepare.outputs.release_version }}
          git push origin --tags

      - name: Create Github Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./gradlew getChangelog --console=plain -q --no-header --no-summary > release-notes.md

          gh release create jb-${{ needs.prepare.outputs.release_version }} \
            --title jb-${{ needs.prepare.outputs.release_version }} \
            --verify-tag \
            --notes-file release-notes.md

      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload jb-${{ needs.prepare.outputs.release_version }} ./build/distributions/*


      - name: Prepare PR to main branch after release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          BRANCH=after-jb-release-${{ needs.prepare.outputs.release_version }}
          
          git checkout -b $BRANCH
          
          NEW_VERSION=${{ needs.prepare.outputs.new_unreleased_version }}-SNAPSHOT
          sed -i "s/^pluginVersion=.*/pluginVersion=${NEW_VERSION}/" gradle.properties
          cat gradle.properties
          
          git add gradle.properties
          git commit -m "Prepare for next development iteration"
          git push --set-upstream origin $BRANCH
          
          gh pr create \
            --title "Release jetbrains plugin version ${NEW_RELEASE_VERSION}" \
            --body "Release jetbrains plugin version ${NEW_RELEASE_VERSION}" \
